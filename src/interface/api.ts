/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/event': {
    /** Getting all the events available to the user */
    get: operations['GET_EVENT'];
  };
  '/user': {};
  '/club': {};
  '/sponsor': {};
  '/discount': {
    /** Get all offers for UADS */
    get: {
      responses: {
        /** Offers successfully received */
        200: unknown;
      };
    };
  };
  '/event/{id}': {
    get: operations['GET_EVENT_ID'];
  };
}

export interface components {
  schemas: {
    /** Data type to store sponsors using the UADS App */
    Sponsor: {
      /** The UUID of the sponsor */
      uuid: string;
    };
    /** Data type to store clubs using the UADS App */
    Club: {
      /** The UUID of the Club */
      uuid: string;
      /** The name of the club */
      name: string;
      /** A club description */
      desc?: string;
      /** A image of the club */
      imagePath?: string;
      /** The admin(s) of the club */
      admins?: string[];
      /** The sponsor(s) of the club */
      sponsors?: components['schemas']['Sponsor'][];
      /** The events hosted by the club */
      events?: components['schemas']['Event'][];
    };
    /** Data type to store events using the UADS App */
    Event: {
      /** The UUID of the event */
      uuid: string;
      /** The name of the event */
      name: string;
      /** The starting Date of the event */
      date: Date;
      /** The path/url to an event image */
      imagePath?: string;
      /** The maximum number of attendees, (-1 for no cap) */
      attendanceCap: number;
      /** The sponsor(s) of the event */
      sponsors?: components['schemas']['Sponsor'][];
      /** An external url for the event */
      url?: string;
      /** The club(s) hosting the event */
      club: components['schemas']['Club'][];
    };
    /** A user of the app */
    User: { [key: string]: unknown };
  };
}

export interface operations {
  /** Getting all the events available to the user */
  GET_EVENT: {
    parameters: {
      query: {
        /** Get event with name */
        name?: string;
      };
    };
    responses: {
      /** Valid request */
      200: {
        content: {
          'application/json': components['schemas']['Event'][];
        };
      };
    };
  };
  GET_EVENT_ID: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Got the event */
      200: {
        content: {
          'application/json': components['schemas']['Event'];
        };
      };
    };
  };
}

export interface external {}
